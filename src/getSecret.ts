// Generated by Microsoft Cadl

// Requires use of the Azure Identity library
import type { TokenCredential } from "@azure/core-auth";

interface GetSecretOptions {
  version?: string;
}

interface SecretValue {
  value?: string;
  id?: string;
  contentType?: string;
  tags?: { [k: string]: string };
  kid?: string;
  managed?: boolean;
}

export async function getSecret(
  baseUrl: URL,
  credential: TokenCredential,
  name: string,
  apiVersion: "7.3",
  options: GetSecretOptions = {}
): Promise<SecretValue> {
  const path = `/secrets/${name}/${options.version ?? ""}`;
  const query =
    "?" +
    [["api-version", apiVersion]]
      .filter(([, value]) => !!value)
      .map((v) => v.join("="))
      .join("&");
  const resource = new URL(path + query, baseUrl).toString();

  const authorization = await credential.getToken(
    "https://vault.azure.net/.default"
  );
  const res = await fetch(resource, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${authorization?.token}`,
    },
  });

  if (res.status < 200 || res.status >= 400) {
    const response = await res.json();
    const e = new Error(response.message);
    throw Object.assign(e, response);
  }

  return res.json();
}

// Inline fetch polyfill?
const fetch =
  typeof globalThis.fetch === "undefined"
    ? (await import("node-fetch")).default
    : globalThis.fetch;
